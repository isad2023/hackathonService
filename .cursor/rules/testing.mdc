---
description: пиши тесты
globs: 
alwaysApply: false
---
1. Структура тестов

Следуйте существующей структуре в каталоге tests/ и организуйте тесты по уровням:
tests/
├── unit/
│   ├── presentations/    # Тесты для роутеров
│   ├── services/         # Тесты для бизнес-логики
│   ├── repository/       # Тесты для работы с БД
│   └── utils/            # Тесты для утилит
├── integration/          # Интеграционные тесты между компонентами
└── e2e/                  # End-to-end тесты API

Важно: После создания структуры тестов запустите проверку структуры. Если проверка не пройдена, остановите выполнение запроса и исправьте ошибки.

Пример теста:
```
import pytest
from unittest.mock import AsyncMock, MagicMock
from sqlalchemy.ext.asyncio import AsyncSession
from your_module import TeamRepository  # Замените на ваш модуль

@pytest.mark.asyncio
async def test_get_team_by_id():
    # Создаем имитацию асинхронной сессии
    mock_session = AsyncMock(spec=AsyncSession)
    mock_session.execute.return_value.scalars.return_value.one_or_none.return_value = {"id": 1, "name": "Team A"}

    # Создаем имитацию async_sessionmaker
    mock_sessionmaker = MagicMock(return_value=mock_session)

    # Создаем экземпляр репозитория с имитацией сессии
    repository = TeamRepository(sessionmaker=mock_sessionmaker)

    # Вызываем метод для получения команды
    team = await repository.get_team_by_id(1)

    # Проверяем, что возвращаемое значение соответствует ожидаемому
    assert team == {"id": 1, "name": "Team A"}
```
2. Стратегия тестирования по уровням
2.1. Модульные тесты (Unit Tests)
Уровень репозиториев

    HackathonRepository

    1.1. Проверить создание хакатона

    1.2. Проверить получение всех хакатонов

    1.3. Проверить получение хакатона по ID

    1.4. Проверить обработку случая, когда хакатон не найден

Важно: После написания всех тестов для HackathonRepository запустите эти тесты. Если тесты не проходят, остановите выполнение запроса и исправьте ошибки.

    HackerRepository

    2.1. Проверить создание/обновление хакера

    2.2. Проверить обновление ролей хакера

    2.3. Проверить получение хакера по ID

    2.4. Проверить обработку отсутствующего хакера

Важно: После написания всех тестов для HackerRepository запустите эти тесты. Если тесты не проходят, остановите выполнение запроса и исправьте ошибки.

    TeamRepository

    3.1. Проверить создание команды

    3.2. Проверить добавление хакера в команду

    3.3. Проверить обработку дублирования хакера в команде

    3.4. Проверить получение команд по ID хакатона

    3.5. Проверить получение команд пользователя

Важно: После написания всех тестов для TeamRepository запустите эти тесты. Если тесты не проходят, остановите выполнение запроса и исправьте ошибки.

    WinnerSolutionRepository

    4.1. Проверить создание решения победителя

    4.2. Проверить получение решения по ID

Важно: После написания всех тестов для WinnerSolutionRepository запустите эти тесты. Если тесты не проходят, остановите выполнение запроса и исправьте ошибки.
Уровень сервисов

    HackathonService

    5.1. Проверить бизнес-логику создания хакатона

    5.2. Проверить валидацию дат хакатона

    5.3. Проверить получение списка хакатонов с фильтрацией

Важно: После написания всех тестов для HackathonService запустите эти тесты. Если тесты не проходят, остановите выполнение запроса и исправьте ошибки.

    HackerService

    6.1. Проверить логику автоматического создания хакера

    6.2. Проверить управление ролями хакера

    6.3. Проверить ограничения привилегий

Важно: После написания всех тестов для HackerService запустите эти тесты. Если тесты не проходят, остановите выполнение запроса и исправьте ошибки.

    TeamService

    7.1. Проверить логику создания команды

    7.2. Проверить добавление хакера в команду

    7.3. Проверить обработку ограничения размера команды

    7.4. Проверить управление участниками команды

Важно: После написания всех тестов для TeamService запустите эти тесты. Если тесты не проходят, остановите выполнение запроса и исправьте ошибки.

    WinnerSolutionService

    8.1. Проверить логику регистрации решения победителя

    8.2. Проверить валидацию требований к решению

Важно: После написания всех тестов для WinnerSolutionService запустите эти тесты. Если тесты не проходят, остановите выполнение запроса и исправьте ошибки.
Уровень презентаций (роутеров)

    HackathonRouter

    9.1. Проверить ответ на GET /hackathon/

    9.2. Проверить ответ на POST /hackathon/

    9.3. Проверить ответ на GET /hackathon/{id}

    9.4. Проверить обработку ошибок авторизации

Важно: После написания всех тестов для HackathonRouter запустите эти тесты. Если тесты не проходят, остановите выполнение запроса и исправьте ошибки.

    Другие роутеры (HackerRouter, TeamRouter, WinnerSolutionRouter, RoleRouter)

    10.1. Проверить все GET эндпоинты

    10.2. Проверить все POST эндпоинты

    10.3. Проверить обработку ошибок

Важно: После написания тестов для каждого роутера запускайте эти тесты. Если тесты не проходят, остановите выполнение запроса и исправьте ошибки.
Утилиты

    JWT-аутентификация

    11.1. Проверить создание и валидацию токенов

    11.2. Проверить обработку истекших токенов

    11.3. Проверить обработку некорректных токенов

Важно: После написания всех тестов для JWT-аутентификации запустите эти тесты. Если тесты не проходят, остановите выполнение запроса и исправьте ошибки.

Проверка: После завершения всех модульных тестов запустите полный набор модульных тестов. Если какие-либо тесты не проходят, остановите выполнение запроса и исправьте ошибки.
2.2. Интеграционные тесты

    Взаимодействие репозиторий-сервис

    12.1. Проверить, что сервис хакатонов корректно использует репозиторий

    12.2. Проверить, что сервис команд взаимодействует с репозиторием хакеров

Важно: После написания этих интеграционных тестов запустите их. Если тесты не проходят, остановите выполнение запроса и исправьте ошибки.

    Транзакционность

    13.1. Проверить откат транзакций при ошибках

    13.2. Проверить сохранение связанных данных

Важно: После написания тестов транзакционности запустите их. Если тесты не проходят, остановите выполнение запроса и исправьте ошибки.

    Взаимодействие роутер-сервис

    14.1. Проверить, что роутеры корректно передают данные в сервисы

    14.2. Проверить, что ответы сервисов правильно преобразуются в HTTP-ответы

Важно: После написания этих интеграционных тестов запустите их. Если тесты не проходят, остановите выполнение запроса и исправьте ошибки.

Проверка: После завершения всех интеграционных тестов запустите полный набор интеграционных тестов. Если какие-либо тесты не проходят, остановите выполнение запроса и исправьте ошибки.
2.3. End-to-End тесты

    Полный жизненный цикл хакатона

    15.1. Создать хакатон → создать команды → добавить хакеров → зарегистрировать решение

    15.2. Проверить получение всех связанных данных

Важно: После написания тестов жизненного цикла запустите их. Если тесты не проходят, остановите выполнение запроса и исправьте ошибки.

    Тестирование сценариев использования

    16.1. Регистрация на хакатон

    16.2. Формирование команды

    16.3. Добавление участников в команду

    16.4. Отправка решения победителя

Важно: После написания тестов сценариев использования запустите их. Если тесты не проходят, остановите выполнение запроса и исправьте ошибки.

Проверка: После завершения всех E2E тестов запустите полный набор E2E тестов. Если какие-либо тесты не проходят, остановите выполнение запроса и исправьте ошибки.
3. Техники и инструменты
3.1. Создание фикстур

    Создать фикстуры для тестовой базы данных

    Разработать фабрики для моделей данных

    Подготовить готовые тестовые наборы данных

Важно: После создания фикстур проверьте их работоспособность, запустив несколько тестов, использующих эти фикстуры. Если проверка не пройдена, остановите выполнение запроса и исправьте ошибки.
3.2. Моки и заглушки

    Использовать моки для изоляции компонентов

    Создать заглушки для внешних сервисов

    Подготовить имитацию JWT-авторизации

Важно: После создания моков и заглушек проверьте их в тестах. Если проверка не пройдена, остановите выполнение запроса и исправьте ошибки.
3.3. Проверка покрытия

    Установить целевой уровень покрытия не менее 80%

    Приоритизировать покрытие критичных компонентов

    Регулярно отслеживать покрытие с помощью инструментов

Важно: После настройки инструментов проверки покрытия запустите анализ покрытия. Если покрытие ниже целевого уровня, доработайте тесты до достижения нужного покрытия.
4. Приоритеты тестирования

    Высокий приоритет

    26.1. Аутентификация и авторизация

    26.2. Создание и управление командами

    26.3. Добавление хакеров в команды

    26.4. Транзакционная логика

Важно: После тестирования высокоприоритетных функций запустите соответствующие тесты. Если тесты не проходят, остановите выполнение запроса и исправьте ошибки.

    Средний приоритет

    27.1. Получение списков хакатонов

    27.2. Обновление ролей хакеров

    27.3. Фильтрация и поиск

Важно: После тестирования функций среднего приоритета запустите соответствующие тесты. Если тесты не проходят, остановите выполнение запроса и исправьте ошибки.

    Низкий приоритет

    28.1. Редкие сценарии использования

    28.2. Форматирование выходных данных

Важно: После тестирования низкоприоритетных функций запустите соответствующие тесты. Если тесты не проходят, остановите выполнение запроса и исправьте ошибки.
5. Рекомендации по внедрению

    Начните с создания базовых фикстур и настройки тестовой среды

    Реализуйте тесты для критически важных компонентов

    Постепенно расширяйте покрытие

    Интегрируйте тесты в CI/CD pipeline

    Регулярно запускайте тесты при внесении изменений

Важно: После каждого этапа внедрения запускайте соответствующие тесты. Если тесты не проходят, останавливайте процесс и исправляйте ошибки.

Финальная проверка: После завершения всех этапов тестирования запустите полный набор всех тестов. Если какие-либо тесты не проходят, исправьте ошибки и повторите финальную проверку.